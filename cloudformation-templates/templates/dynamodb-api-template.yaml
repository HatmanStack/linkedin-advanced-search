AWSTemplateFormatVersion: '2010-09-09'
Description: 'DynamoDB API Lambda with API Gateway - Provides REST API for DynamoDB operations'

Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment package

  LambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the Lambda deployment package zip file

  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  DynamoDBTableName:
    Type: String
    Default: linkedin-advanced-search
    Description: Name of the DynamoDB table for profile and edge data

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

  ProjectName:
    Type: String
    Default: linkedin-advanced-search
    Description: Project name for resource naming and tagging

  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID for JWT token validation

  CognitoUserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID for JWT token validation

  CognitoUserPoolArn:
    Type: String
    Description: Cognito User Pool ARN for API Gateway authorizer

Mappings:
  EnvironmentConfig:
    dev:
      LambdaMemorySize: 512
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 100
      ApiThrottleRateLimit: 50
    staging:
      LambdaMemorySize: 512
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 200
      ApiThrottleRateLimit: 100
    prod:
      LambdaMemorySize: 1024
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 500
      ApiThrottleRateLimit: 250

Resources:
  # CloudWatch Log Group for Lambda
  DynamoDBApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-dynamodb-api-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: dynamodb-api

  # IAM Role for Lambda Execution
  DynamoDBApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-dynamodb-api-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}/index/*'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:GetUser
                Resource: !Ref CognitoUserPoolArn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: dynamodb-api

  # Lambda Function
  DynamoDBApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-dynamodb-api-${Environment}'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBApiLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaTimeout]
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_REGION: !Ref AWS::Region
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: dynamodb-api
    DependsOn: DynamoDBApiLogGroup

  # API Gateway REST API
  DynamoDBApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-dynamodb-api-${Environment}'
      Description: 'REST API for DynamoDB operations'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: dynamodb-api

  # Cognito Authorizer
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub '${ProjectName}-cognito-authorizer-${Environment}'
      RestApiId: !Ref DynamoDBApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Ref CognitoUserPoolArn
      IdentitySource: method.request.header.Authorization

  # API Gateway Resources and Methods
  ProfilesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DynamoDBApi
      ParentId: !GetAtt DynamoDBApi.RootResourceId
      PathPart: profiles

  ProfilesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBApi
      ResourceId: !Ref ProfilesResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfilesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBApi
      ResourceId: !Ref ProfilesResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfilesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBApi
      ResourceId: !Ref ProfilesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ProfileIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DynamoDBApi
      ParentId: !Ref ProfilesResource
      PathPart: '{profileId}'

  ProfileIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfileIdPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfileIdDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfileIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions for API Gateway
  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DynamoDBApiLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DynamoDBApi}/*/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref DynamoDBApi
      StageName: !Ref Environment
    DependsOn:
      - ProfilesGetMethod
      - ProfilesPostMethod
      - ProfilesOptionsMethod
      - ProfileIdGetMethod
      - ProfileIdPutMethod
      - ProfileIdDeleteMethod
      - ProfileIdOptionsMethod

  # Usage Plan and API Key (optional)
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub '${ProjectName}-dynamodb-api-${Environment}-usage-plan'
      Description: 'Usage plan for DynamoDB API'
      ApiStages:
        - ApiId: !Ref DynamoDBApi
          Stage: !Ref Environment
      Throttle:
        BurstLimit: !FindInMap [EnvironmentConfig, !Ref Environment, ApiThrottleBurstLimit]
        RateLimit: !FindInMap [EnvironmentConfig, !Ref Environment, ApiThrottleRateLimit]
    DependsOn: ApiDeployment

  # CloudWatch Alarms
  DynamoDBApiLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dynamodb-api-${Environment}-lambda-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DynamoDBApiLambda
      TreatMissingData: notBreaching

  DynamoDBApiLambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dynamodb-api-${Environment}-lambda-duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25000  # 25 seconds (out of 30s timeout)
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DynamoDBApiLambda
      TreatMissingData: notBreaching

  ApiGateway4xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dynamodb-api-${Environment}-4xx-errors'
      AlarmDescription: 'API Gateway 4xx error rate alarm'
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub '${ProjectName}-dynamodb-api-${Environment}'
      TreatMissingData: notBreaching

  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dynamodb-api-${Environment}-5xx-errors'
      AlarmDescription: 'API Gateway 5xx error rate alarm'
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub '${ProjectName}-dynamodb-api-${Environment}'
      TreatMissingData: notBreaching

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${DynamoDBApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  ApiGatewayId:
    Description: 'API Gateway ID'
    Value: !Ref DynamoDBApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  LambdaFunctionArn:
    Description: 'DynamoDB API Lambda function ARN'
    Value: !GetAtt DynamoDBApiLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  LambdaFunctionName:
    Description: 'DynamoDB API Lambda function name'
    Value: !Ref DynamoDBApiLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaName'

  CognitoAuthorizerId:
    Description: 'Cognito Authorizer ID'
    Value: !Ref CognitoAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}-AuthorizerId'