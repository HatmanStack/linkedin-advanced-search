AWSTemplateFormatVersion: '2010-09-09'
Description: 'Monitoring and Observability Resources for Lambda Functions'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  ProjectName:
    Type: String
    Default: linkedin-advanced-search
    Description: Project name for resource naming and tagging

  NotificationEmail:
    Type: String
    Default: ''
    Description: Email address to receive alarm notifications (leave empty to skip notifications)

  DashboardName:
    Type: String
    Default: ''
    Description: Name for the CloudWatch dashboard (leave empty to use default name)

Conditions:
  CreateSNSTopic: !Not [!Equals [!Ref NotificationEmail, '']]
  UseDefaultDashboardName: !Equals [!Ref DashboardName, '']

Resources:
  # SNS Topic for Alarm Notifications
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: CreateSNSTopic
    Properties:
      TopicName: !Sub '${ProjectName}-alarms-${Environment}'
      DisplayName: !Sub '${ProjectName} Alarms (${Environment})'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: monitoring

  # SNS Subscription for Email Notifications
  AlarmNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateSNSTopic
    Properties:
      TopicArn: !Ref AlarmNotificationTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !If 
        - UseDefaultDashboardName
        - !Sub '${ProjectName}-${Environment}-dashboard'
        - !Ref DashboardName
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "text",
              "x": 0,
              "y": 0,
              "width": 24,
              "height": 1,
              "properties": {
                "markdown": "# ${ProjectName} - ${Environment} Environment Monitoring Dashboard"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 1,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProjectName}-edge-processing-${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProjectName}-pinecone-search-${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProjectName}-pinecone-indexer-${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProjectName}-profile-processing-${Environment}", { "stat": "Sum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 1,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${ProjectName}-edge-processing-${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${ProjectName}-pinecone-search-${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${ProjectName}-pinecone-indexer-${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${ProjectName}-profile-processing-${Environment}", { "stat": "Sum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 7,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ProjectName}-edge-processing-${Environment}", { "stat": "Average", "period": 300 } ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ProjectName}-pinecone-search-${Environment}", { "stat": "Average", "period": 300 } ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ProjectName}-pinecone-indexer-${Environment}", { "stat": "Average", "period": 300 } ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ProjectName}-profile-processing-${Environment}", { "stat": "Average", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Duration (ms)",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 7,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${ProjectName}-edge-processing-${Environment}-api", "Stage", "${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/ApiGateway", "Count", "ApiName", "${ProjectName}-pinecone-search-${Environment}-api", "Stage", "${Environment}", { "stat": "Sum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Requests",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 13,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "4XXError", "ApiName", "${ProjectName}-edge-processing-${Environment}-api", "Stage", "${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/ApiGateway", "4XXError", "ApiName", "${ProjectName}-pinecone-search-${Environment}-api", "Stage", "${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/ApiGateway", "5XXError", "ApiName", "${ProjectName}-edge-processing-${Environment}-api", "Stage", "${Environment}", { "stat": "Sum", "period": 300 } ],
                  [ "AWS/ApiGateway", "5XXError", "ApiName", "${ProjectName}-pinecone-search-${Environment}-api", "Stage", "${Environment}", { "stat": "Sum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 13,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "${ProjectName}-profile-processing-${Environment}-queue", { "stat": "Maximum", "period": 300 } ],
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "${ProjectName}-profile-processing-${Environment}-dlq", { "stat": "Maximum", "period": 300 } ],
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "${ProjectName}-pinecone-indexer-${Environment}-dlq", { "stat": "Maximum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "SQS Queue Depth",
                "period": 300
              }
            }
          ]
        }

  # Composite Alarm for Critical Services
  CompositeServiceAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-critical-services-alarm'
      AlarmDescription: 'Composite alarm for critical service failures'
      AlarmRule: !Sub |
        ALARM("${ProjectName}-edge-processing-${Environment}-lambda-errors") OR
        ALARM("${ProjectName}-pinecone-search-${Environment}-lambda-errors") OR
        ALARM("${ProjectName}-pinecone-indexer-${Environment}-lambda-errors") OR
        ALARM("${ProjectName}-profile-processing-${Environment}-lambda-errors") OR
        ALARM("${ProjectName}-profile-processing-${Environment}-dlq-messages") OR
        ALARM("${ProjectName}-pinecone-indexer-${Environment}-dlq-messages")
      AlarmActions: !If [CreateSNSTopic, [!Ref AlarmNotificationTopic], !Ref 'AWS::NoValue']
      InsufficientDataActions: !If [CreateSNSTopic, [!Ref AlarmNotificationTopic], !Ref 'AWS::NoValue']
      OKActions: !If [CreateSNSTopic, [!Ref AlarmNotificationTopic], !Ref 'AWS::NoValue']
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: monitoring

Outputs:
  DashboardURL:
    Description: 'URL to the CloudWatch Dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${MonitoringDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'

  SNSTopicArn:
    Description: 'ARN of the SNS Topic for alarm notifications'
    Value: !If [CreateSNSTopic, !Ref AlarmNotificationTopic, 'No SNS Topic created']
    Export:
      Name: !If [CreateSNSTopic, !Sub '${AWS::StackName}-SNSTopicArn', !Ref 'AWS::NoValue']

  CompositeAlarmName:
    Description: 'Name of the composite alarm for critical services'
    Value: !Ref CompositeServiceAlarm
    Export:
      Name: !Sub '${AWS::StackName}-CompositeAlarmName'