AWSTemplateFormatVersion: '2010-09-09'
Description: 'Profile Processing Lambda with S3 and SQS - Processes LinkedIn profile screenshots'

Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment package

  LambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the Lambda deployment package zip file

  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  DynamoDBTableName:
    Type: String
    Default: linkedin-advanced-search
    Description: Name of the DynamoDB table for profile and edge data

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

  ProjectName:
    Type: String
    Default: linkedin-advanced-search
    Description: Project name for resource naming and tagging

  BucketName:
    Type: String
    Default: linkedin-advanced-search-screenshots-2024
    Description: Name of the S3 bucket for profile screenshots (leave empty to auto-generate)

  MaxReceiveCount:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 10
    Description: Maximum number of times a message can be received before being sent to the DLQ

Mappings:
  EnvironmentConfig:
    dev:
      LambdaMemorySize: 2048
      LambdaTimeout: 300
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 10
    staging:
      LambdaMemorySize: 2048
      LambdaTimeout: 300
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 10
    prod:
      LambdaMemorySize: 3072
      LambdaTimeout: 300
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 10

Conditions:
  CreateNewBucket: !Equals [!Ref BucketName, '']

Resources:
  # S3 Bucket for profile screenshots
  

  # SQS Queue for S3 event notifications
  ProfileProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-profile-processing-${Environment}-queue'
      VisibilityTimeout: 360  # 6 minutes (Lambda timeout + buffer)
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProfileProcessingDLQ.Arn
        maxReceiveCount: !Ref MaxReceiveCount
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: profile-processing

  # Dead Letter Queue for failed processing
  ProfileProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-profile-processing-${Environment}-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 300
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: profile-processing

  # SQS Queue Policy
  ProfileProcessingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProfileProcessingQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ProfileProcessingQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:s3:::${BucketName}'

  # CloudWatch Log Group for Lambda
  ProfileProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-profile-processing-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: profile-processing

  # IAM Role for Lambda Execution
  ProfileProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-profile-processing-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}'
                  - !Sub 'arn:aws:s3:::${BucketName}/*'
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt ProfileProcessingQueue.Arn
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:Converse
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/us.meta.llama4-maverick-17b-instruct-v1:0'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: profile-processing

  # Lambda Function
  ProfileProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-profile-processing-${Environment}'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ProfileProcessingLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaTimeout]
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
          AI_MODEL_ID: 'us.meta.llama4-maverick-17b-instruct-v1:0'
      ReservedConcurrentExecutions: 5
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: profile-processing
    DependsOn: ProfileProcessingLogGroup

  # Event Source Mapping for SQS
  ProfileProcessingEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !FindInMap [EnvironmentConfig, !Ref Environment, BatchSize]
      Enabled: true
      EventSourceArn: !GetAtt ProfileProcessingQueue.Arn
      FunctionName: !GetAtt ProfileProcessingLambda.Arn
      MaximumBatchingWindowInSeconds: !FindInMap [EnvironmentConfig, !Ref Environment, MaximumBatchingWindowInSeconds]

  # CloudWatch Alarms
  ProfileProcessingLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-profile-processing-${Environment}-lambda-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProfileProcessingLambda
      TreatMissingData: notBreaching

  ProfileProcessingLambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-profile-processing-${Environment}-lambda-duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 270000  # 270 seconds (out of 300s timeout)
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProfileProcessingLambda
      TreatMissingData: notBreaching

  ProfileProcessingDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-profile-processing-${Environment}-dlq-messages'
      AlarmDescription: 'Dead letter queue message count alarm'
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ProfileProcessingDLQ.QueueName
      TreatMissingData: notBreaching

Outputs:
  BucketName:
    Description: 'S3 bucket for profile screenshots'
    Value: !Ref BucketName
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  BucketArn:
    Description: 'S3 bucket ARN'
    Value: arn:aws:s3:::linkedin-advanced-search-screenshots-2024
    Export:
      Name: !Sub '${AWS::StackName}-BucketArn'

  QueueUrl:
    Description: 'SQS queue URL'
    Value: !Ref ProfileProcessingQueue
    Export:
      Name: !Sub '${AWS::StackName}-QueueUrl'

  QueueArn:
    Description: 'SQS queue ARN'
    Value: !GetAtt ProfileProcessingQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-QueueArn'

  DeadLetterQueueUrl:
    Description: 'Dead letter queue URL'
    Value: !Ref ProfileProcessingDLQ
    Export:
      Name: !Sub '${AWS::StackName}-DLQUrl'

  DeadLetterQueueArn:
    Description: 'Dead letter queue ARN'
    Value: !GetAtt ProfileProcessingDLQ.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DLQArn'

  LambdaFunctionArn:
    Description: 'Profile Processing Lambda function ARN'
    Value: !GetAtt ProfileProcessingLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  LambdaFunctionName:
    Description: 'Profile Processing Lambda function name'
    Value: !Ref ProfileProcessingLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaName'