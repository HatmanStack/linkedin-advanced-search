AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pinecone Indexer Lambda - Processes DynamoDB Stream events to maintain Pinecone vector index'

Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment package

  LambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the Lambda deployment package zip file

  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  DynamoDBTableName:
    Type: String
    Default: linkedin-advanced-search
    Description: Name of the DynamoDB table for profile and edge data

  DynamoDBStreamArn:
    Type: String
    Description: ARN of the DynamoDB Stream to process
    Default: ''

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

  ProjectName:
    Type: String
    Default: linkedin-advanced-search
    Description: Project name for resource naming and tagging

  BatchSize:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 10
    Description: Maximum number of records to include in each batch

  MaximumBatchingWindowInSeconds:
    Type: Number
    Default: 5
    MinValue: 0
    MaxValue: 300
    Description: Maximum time to gather records before invoking the function

Mappings:
  EnvironmentConfig:
    dev:
      LambdaMemorySize: 1024
      LambdaTimeout: 60
    staging:
      LambdaMemorySize: 1024
      LambdaTimeout: 60
    prod:
      LambdaMemorySize: 2048
      LambdaTimeout: 120

Conditions:
  HasStreamArn: !Not [!Equals [!Ref DynamoDBStreamArn, ""]]

Resources:
  # CloudWatch Log Group for Lambda
  PineconeIndexerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-pinecone-indexer-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-indexer

  # Dead Letter Queue for failed processing
  PineconeIndexerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-pinecone-indexer-${Environment}-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 300
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-indexer

  # IAM Role for Lambda Execution
  PineconeIndexerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-pinecone-indexer-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBStreamsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !If [HasStreamArn, !Ref DynamoDBStreamArn, "*"]
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
        - PolicyName: SQSDeadLetterQueueAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt PineconeIndexerDLQ.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-indexer

  # Lambda Function
  PineconeIndexerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-pinecone-indexer-${Environment}'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PineconeIndexerLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaTimeout]
      DeadLetterConfig:
        TargetArn: !GetAtt PineconeIndexerDLQ.Arn
      Environment:
        Variables:
          PINECONE_INDEX_NAME: !Sub '${ProjectName}-${Environment}'
      ReservedConcurrentExecutions: 10
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-indexer
    DependsOn: PineconeIndexerLogGroup

  # Event Source Mapping for DynamoDB Stream
  PineconeIndexerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Ref BatchSize
      Enabled: true
      EventSourceArn: !Ref DynamoDBStreamArn
      FunctionName: !GetAtt PineconeIndexerLambda.Arn
      StartingPosition: LATEST
      MaximumBatchingWindowInSeconds: !Ref MaximumBatchingWindowInSeconds
      FilterCriteria:
        Filters:
          - Pattern: '{"dynamodb":{"Keys":{"PK":{"S":[{"prefix":"PROFILE#"}]},"SK":{"S":["#METADATA"]}}}}'

  # CloudWatch Alarms
  PineconeIndexerLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-indexer-${Environment}-lambda-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PineconeIndexerLambda
      TreatMissingData: notBreaching

  PineconeIndexerLambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-indexer-${Environment}-lambda-duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50000  # 50 seconds (out of 60s timeout)
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PineconeIndexerLambda
      TreatMissingData: notBreaching

  PineconeIndexerDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-indexer-${Environment}-dlq-messages'
      AlarmDescription: 'Dead letter queue message count alarm'
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PineconeIndexerDLQ.QueueName
      TreatMissingData: notBreaching

Outputs:
  LambdaFunctionArn:
    Description: 'Pinecone Indexer Lambda function ARN'
    Value: !GetAtt PineconeIndexerLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  LambdaFunctionName:
    Description: 'Pinecone Indexer Lambda function name'
    Value: !Ref PineconeIndexerLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaName'

  DeadLetterQueueUrl:
    Description: 'URL of the Dead Letter Queue'
    Value: !Ref PineconeIndexerDLQ
    Export:
      Name: !Sub '${AWS::StackName}-DLQUrl'

  DeadLetterQueueArn:
    Description: 'ARN of the Dead Letter Queue'
    Value: !GetAtt PineconeIndexerDLQ.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DLQArn'