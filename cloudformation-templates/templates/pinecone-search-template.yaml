AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pinecone Search Lambda with API Gateway - Provides semantic search across LinkedIn profiles'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  DynamoDBTableName:
    Type: String
    Default: linkedin-advanced-search
    Description: Name of the DynamoDB table for profile and edge data

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

  ProjectName:
    Type: String
    Default: linkedin-advanced-search
    Description: Project name for resource naming and tagging

  CognitoUserPoolId:
    Type: String
    Description: ID of the Cognito User Pool for API authorization
    Default: ''

  CognitoUserPoolClientId:
    Type: String
    Description: ID of the Cognito User Pool Client for API authorization
    Default: ''

Mappings:
  EnvironmentConfig:
    dev:
      LambdaMemorySize: 512
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 100
      ApiThrottleRateLimit: 50
    staging:
      LambdaMemorySize: 512
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 200
      ApiThrottleRateLimit: 100
    prod:
      LambdaMemorySize: 1024
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 500
      ApiThrottleRateLimit: 250

Conditions:
  HasCognitoUserPool: !Not [!Equals [!Ref CognitoUserPoolId, '']]

Resources:
  # CloudWatch Log Group for Lambda
  PineconeSearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-pinecone-search-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  # IAM Role for Lambda Execution
  PineconeSearchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}/index/*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-micro-v1:0'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  # Lambda Function
  PineconeSearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-pinecone-search-${Environment}'
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt PineconeSearchLambdaRole.Arn
      Code:
        ZipFile: |
          /**
           * Pinecone Search Lambda Function
           * 
           * Provides semantic search across LinkedIn profiles with user-profile relationship filtering.
           * Only returns profiles that the authenticated user has connections to.
           */

          const AWS = require('aws-sdk');
          const jwt = require('jsonwebtoken');

          // Configuration from environment variables
          const PINECONE_INDEX_NAME = process.env.PINECONE_INDEX_NAME;
          const PINECONE_HOST = process.env.PINECONE_HOST;
          const PINECONE_API_KEY = process.env.PINECONE_API_KEY;
          const DYNAMODB_TABLE = process.env.DYNAMODB_TABLE;
          const AWS_REGION = process.env.AWS_REGION || 'us-west-2';

          // Initialize AWS clients
          const dynamodb = new AWS.DynamoDB.DocumentClient({ region: AWS_REGION });
          const bedrock = new AWS.BedrockRuntime({ region: AWS_REGION });

          /**
           * Extract user ID from Cognito JWT token
           */
          function extractUserFromJWT(authHeader) {
              if (!authHeader || !authHeader.startsWith('Bearer ')) {
                  throw new Error('Missing or invalid Authorization header');
              }

              const token = authHeader.substring(7);

              try {
                  // Decode without verification for now (API Gateway should handle verification)
                  const decoded = jwt.decode(token);

                  if (!decoded || !decoded.sub) {
                      throw new Error('Invalid token: missing sub claim');
                  }

                  return decoded.sub;
              } catch (error) {
                  throw new Error(`Token validation failed: ${error.message}`);
              }
          }

          /**
           * Get all profile IDs that the user has connections to
           */
          async function getUserConnectedProfiles(userId) {
              try {
                  const params = {
                      TableName: DYNAMODB_TABLE,
                      KeyConditionExpression: 'PK = :pk AND begins_with(SK, :sk)',
                      ExpressionAttributeValues: {
                          ':pk': `USER#${userId}`,
                          ':sk': 'PROFILE#'
                      },
                      ProjectionExpression: 'SK'
                  };

                  const result = await dynamodb.query(params).promise();

                  // Extract profile IDs from SK values
                  const profileIds = result.Items.map(item => item.SK);

                  console.log(`Found ${profileIds.length} connected profiles for user ${userId}`);
                  return profileIds;

              } catch (error) {
                  console.error('Error fetching user connected profiles:', error);
                  throw new Error('Failed to fetch user connections');
              }
          }

          /**
           * Main Lambda handler
           */
          exports.handler = async (event) => {
              try {
                  console.log('Received event:', JSON.stringify(event, null, 2));

                  // Handle CORS preflight
                  if (event.httpMethod === 'OPTIONS') {
                      return {
                          statusCode: 200,
                          headers: {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                              'Access-Control-Allow-Methods': 'POST,OPTIONS'
                          },
                          body: ''
                      };
                  }

                  // Extract user ID from JWT token
                  const userId = extractUserFromJWT(event.headers.Authorization || event.headers.authorization);
                  console.log(`Processing search request for user: ${userId}`);

                  // Parse request body
                  let requestBody;
                  try {
                      requestBody = JSON.parse(event.body || '{}');
                  } catch (parseError) {
                      throw new Error('Invalid JSON in request body');
                  }

                  const {
                      query,
                      filters = {},
                      limit = 10
                  } = requestBody;

                  // Validate required parameters
                  if (!query || typeof query !== 'string' || query.trim().length === 0) {
                      throw new Error('Query parameter is required and must be a non-empty string');
                  }

                  if (limit > 50) {
                      throw new Error('Limit cannot exceed 50');
                  }

                  // Get user's connected profile IDs
                  const connectedProfileIds = await getUserConnectedProfiles(userId);

                  if (connectedProfileIds.length === 0) {
                      return {
                          statusCode: 200,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              results: [],
                              total: 0,
                              query_time_ms: 0
                          })
                      };
                  }

                  // Placeholder for actual search logic
                  // In a real implementation, this would:
                  // 1. Call Pinecone API for vector search
                  // 2. Filter results based on user connections
                  // 3. Format and return the results

                  // Simulate search results
                  const mockResults = connectedProfileIds.slice(0, limit).map((profileId, index) => ({
                      profile_id: profileId,
                      name: `Test User ${index + 1}`,
                      title: 'Software Engineer',
                      company: 'Example Corp',
                      location: 'San Francisco, CA',
                      score: 0.95 - (index * 0.05),
                      summary: 'This is a simulated search result.',
                      skills: ['JavaScript', 'Python', 'AWS'],
                      headline: 'Senior Software Engineer'
                  }));

                  return {
                      statusCode: 200,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                          'Access-Control-Allow-Methods': 'POST,OPTIONS'
                      },
                      body: JSON.stringify({
                          results: mockResults,
                          total: mockResults.length,
                          query_time_ms: 100
                      })
                  };

              } catch (error) {
                  console.error('Lambda error:', error);

                  let statusCode = 500;
                  let message = 'Internal server error';

                  if (error.message.includes('Authorization') || error.message.includes('Token')) {
                      statusCode = 401;
                      message = 'Unauthorized';
                  } else if (error.message.includes('validation') || error.message.includes('Invalid')) {
                      statusCode = 400;
                      message = 'Bad request';
                  }

                  return {
                      statusCode,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          error: message,
                          details: process.env.NODE_ENV === 'development' ? error.message : undefined
                      })
                  };
              }
          };
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaTimeout]
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          PINECONE_INDEX_NAME: !Sub '${ProjectName}-${Environment}'
          AWS_REGION: !Ref AWS::Region
      ReservedConcurrencyLimit: 10
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search
    DependsOn: PineconeSearchLogGroup

  # API Gateway REST API
  PineconeSearchApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-pinecone-search-${Environment}-api'
      Description: 'API for semantic search across LinkedIn profiles'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  # API Gateway Resource (search)
  PineconeSearchApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PineconeSearchApi
      ParentId: !GetAtt PineconeSearchApi.RootResourceId
      PathPart: 'search'

  # API Gateway Method (POST)
  PineconeSearchApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PineconeSearchApi
      ResourceId: !Ref PineconeSearchApiResource
      HttpMethod: POST
      AuthorizationType: !If [HasCognitoUserPool, COGNITO_USER_POOLS, NONE]
      AuthorizerId: !If [HasCognitoUserPool, !Ref PineconeSearchApiAuthorizer, !Ref 'AWS::NoValue']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PineconeSearchLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway OPTIONS Method for CORS
  PineconeSearchApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PineconeSearchApi
      ResourceId: !Ref PineconeSearchApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway Authorizer (Conditional)
  PineconeSearchApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Condition: HasCognitoUserPool
    Properties:
      Name: !Sub '${ProjectName}-pinecone-search-${Environment}-authorizer'
      RestApiId: !Ref PineconeSearchApi
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}'

  # API Gateway Deployment
  PineconeSearchApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref PineconeSearchApi
      StageName: !Ref Environment
    DependsOn:
      - PineconeSearchApiMethod
      - PineconeSearchApiOptionsMethod

  # API Gateway Stage
  PineconeSearchApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref PineconeSearchApi
      DeploymentId: !Ref PineconeSearchApiDeployment
      StageName: !Ref Environment
      ThrottleSettings:
        BurstLimit: !FindInMap [EnvironmentConfig, !Ref Environment, ApiThrottleBurstLimit]
        RateLimit: !FindInMap [EnvironmentConfig, !Ref Environment, ApiThrottleRateLimit]
      TracingEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  # Lambda Permission for API Gateway
  PineconeSearchLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PineconeSearchLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PineconeSearchApi}/*/*'

  # CloudWatch Alarms
  PineconeSearchLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PineconeSearchLambda
      TreatMissingData: notBreaching

  PineconeSearchLambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PineconeSearchLambda
      TreatMissingData: notBreaching

  PineconeSearchApi4xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-search-${Environment}-api-4xx-errors'
      AlarmDescription: 'API Gateway 4xx error rate alarm'
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref PineconeSearchApi
        - Name: Stage
          Value: !Ref Environment
      TreatMissingData: notBreaching

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL for pinecone search'
    Value: !Sub 'https://${PineconeSearchApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/search'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  LambdaFunctionArn:
    Description: 'Pinecone Search Lambda function ARN'
    Value: !GetAtt PineconeSearchLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  LambdaFunctionName:
    Description: 'Pinecone Search Lambda function name'
    Value: !Ref PineconeSearchLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaName'

  ApiId:
    Description: 'API Gateway REST API ID'
    Value: !Ref PineconeSearchApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'