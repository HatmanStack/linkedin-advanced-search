AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pinecone Search Lambda with API Gateway - Provides semantic search across LinkedIn profiles'

Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment package

  LambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the Lambda deployment package zip file

  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  DynamoDBTableName:
    Type: String
    Default: linkedin-advanced-search
    Description: Name of the DynamoDB table for profile and edge data

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

  ProjectName:
    Type: String
    Default: linkedin-advanced-search
    Description: Project name for resource naming and tagging

  CognitoUserPoolId:
    Type: String
    Description: ID of the Cognito User Pool for API authorization
    Default: ''

  CognitoUserPoolClientId:
    Type: String
    Description: ID of the Cognito User Pool Client for API authorization
    Default: ''

Mappings:
  EnvironmentConfig:
    dev:
      LambdaMemorySize: 512
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 100
      ApiThrottleRateLimit: 50
    staging:
      LambdaMemorySize: 512
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 200
      ApiThrottleRateLimit: 100
    prod:
      LambdaMemorySize: 1024
      LambdaTimeout: 30
      ApiThrottleBurstLimit: 500
      ApiThrottleRateLimit: 250

Conditions:
  HasCognitoUserPool: !Not [!Equals [!Ref CognitoUserPoolId, '']]

Resources:
  # CloudWatch Log Group for Lambda
  PineconeSearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-pinecone-search-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  # IAM Role for Lambda Execution
  PineconeSearchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}/index/*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-micro-v1:0'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  # Lambda Function
  PineconeSearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-pinecone-search-${Environment}'
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt PineconeSearchLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, LambdaTimeout]
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          PINECONE_INDEX_NAME: !Sub '${ProjectName}-${Environment}'
      ReservedConcurrentExecutions: 10
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search
    DependsOn: PineconeSearchLogGroup

  # API Gateway REST API
  PineconeSearchApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-pinecone-search-${Environment}-api'
      Description: 'API for semantic search across LinkedIn profiles'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  # API Gateway Resource (search)
  PineconeSearchApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PineconeSearchApi
      ParentId: !GetAtt PineconeSearchApi.RootResourceId
      PathPart: 'search'

  # API Gateway Method (POST)
  PineconeSearchApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PineconeSearchApi
      ResourceId: !Ref PineconeSearchApiResource
      HttpMethod: POST
      AuthorizationType: !If [HasCognitoUserPool, COGNITO_USER_POOLS, NONE]
      AuthorizerId: !If [HasCognitoUserPool, !Ref PineconeSearchApiAuthorizer, !Ref 'AWS::NoValue']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PineconeSearchLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway OPTIONS Method for CORS
  PineconeSearchApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PineconeSearchApi
      ResourceId: !Ref PineconeSearchApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway Authorizer (Conditional)
  PineconeSearchApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Condition: HasCognitoUserPool
    Properties:
      Name: !Sub '${ProjectName}-pinecone-search-${Environment}-authorizer'
      RestApiId: !Ref PineconeSearchApi
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}'

  # API Gateway Deployment
  PineconeSearchApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref PineconeSearchApi
      StageName: !Sub '${Environment}-${AWS::StackName}'
    DependsOn:
      - PineconeSearchApiMethod
      - PineconeSearchApiOptionsMethod

  # Lambda Permission for API Gateway
  PineconeSearchLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PineconeSearchLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PineconeSearchApi}/*/*'

  # CloudWatch Alarms
  PineconeSearchLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PineconeSearchLambda
      TreatMissingData: notBreaching

  PineconeSearchLambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PineconeSearchLambda
      TreatMissingData: notBreaching

  PineconeSearchApi4xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-search-${Environment}-api-4xx-errors'
      AlarmDescription: 'API Gateway 4xx error rate alarm'
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref PineconeSearchApi
        - Name: Stage
          Value: !Ref Environment
      TreatMissingData: notBreaching

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL for pinecone search'
    Value: !Sub 'https://${PineconeSearchApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/search'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  LambdaFunctionArn:
    Description: 'Pinecone Search Lambda function ARN'
    Value: !GetAtt PineconeSearchLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  LambdaFunctionName:
    Description: 'Pinecone Search Lambda function name'
    Value: !Ref PineconeSearchLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaName'

  ApiId:
    Description: 'API Gateway REST API ID'
    Value: !Ref PineconeSearchApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'