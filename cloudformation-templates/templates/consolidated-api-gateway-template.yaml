AWSTemplateFormatVersion: '2010-09-09'
Description: 'Consolidated API Gateway with three routes - DynamoDB API, Pinecone Search, and Edge Processing'

Parameters:
  # Lambda Code Parameters
  DynamoDBApiLambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the DynamoDB API Lambda deployment package

  DynamoDBApiLambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the DynamoDB API Lambda deployment package zip file

  PineconeSearchLambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Pinecone Search Lambda deployment package

  PineconeSearchLambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the Pinecone Search Lambda deployment package zip file

  EdgeProcessingLambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Edge Processing Lambda deployment package

  EdgeProcessingLambdaCodeS3Key:
    Type: String
    Description: S3 key (path) to the Edge Processing Lambda deployment package zip file

  # Common Parameters
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  DynamoDBTableName:
    Type: String
    Default: linkedin-advanced-search
    Description: Name of the DynamoDB table for profile and edge data

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

  ProjectName:
    Type: String
    Default: linkedin-advanced-search
    Description: Project name for resource naming and tagging

  # Cognito Parameters
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID for JWT token validation

  CognitoUserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID for JWT token validation

  CognitoUserPoolArn:
    Type: String
    Description: Cognito User Pool ARN for API Gateway authorizer

Mappings:
  EnvironmentConfig:
    dev:
      DynamoDBApiLambdaMemorySize: 512
      DynamoDBApiLambdaTimeout: 30
      PineconeSearchLambdaMemorySize: 512
      PineconeSearchLambdaTimeout: 30
      EdgeProcessingLambdaMemorySize: 512
      EdgeProcessingLambdaTimeout: 30
      ApiThrottleBurstLimit: 100
      ApiThrottleRateLimit: 50
    staging:
      DynamoDBApiLambdaMemorySize: 512
      DynamoDBApiLambdaTimeout: 30
      PineconeSearchLambdaMemorySize: 512
      PineconeSearchLambdaTimeout: 30
      EdgeProcessingLambdaMemorySize: 512
      EdgeProcessingLambdaTimeout: 30
      ApiThrottleBurstLimit: 200
      ApiThrottleRateLimit: 100
    prod:
      DynamoDBApiLambdaMemorySize: 1024
      DynamoDBApiLambdaTimeout: 30
      PineconeSearchLambdaMemorySize: 1024
      PineconeSearchLambdaTimeout: 30
      EdgeProcessingLambdaMemorySize: 1024
      EdgeProcessingLambdaTimeout: 30
      ApiThrottleBurstLimit: 500
      ApiThrottleRateLimit: 250

Resources:
  # ========================================
  # LAMBDA FUNCTIONS AND ROLES
  # ========================================

  # DynamoDB API Lambda
  DynamoDBApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-dynamodb-api-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: dynamodb-api

  DynamoDBApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-dynamodb-api-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}/index/*'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:GetUser
                Resource: !Ref CognitoUserPoolArn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: dynamodb-api

  DynamoDBApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-dynamodb-api-${Environment}'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBApiLambdaRole.Arn
      Code:
        S3Bucket: !Ref DynamoDBApiLambdaCodeS3Bucket
        S3Key: !Ref DynamoDBApiLambdaCodeS3Key
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, DynamoDBApiLambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, DynamoDBApiLambdaTimeout]
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_REGION: !Ref AWS::Region
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: dynamodb-api
    DependsOn: DynamoDBApiLogGroup

  # Pinecone Search Lambda
  PineconeSearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-pinecone-search-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  PineconeSearchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}/index/*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:foundation-model/amazon.nova-micro-v1:0'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search

  PineconeSearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-pinecone-search-${Environment}'
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt PineconeSearchLambdaRole.Arn
      Code:
        S3Bucket: !Ref PineconeSearchLambdaCodeS3Bucket
        S3Key: !Ref PineconeSearchLambdaCodeS3Key
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, PineconeSearchLambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, PineconeSearchLambdaTimeout]
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          PINECONE_INDEX_NAME: !Sub '${ProjectName}-${Environment}'
      ReservedConcurrentExecutions: 10
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: pinecone-search
    DependsOn: PineconeSearchLogGroup

  # Edge Processing Lambda
  EdgeProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-edge-processing-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: edge-processing

  EdgeProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-edge-processing-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}/index/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: edge-processing

  EdgeProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-edge-processing-${Environment}'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt EdgeProcessingLambdaRole.Arn
      Code:
        S3Bucket: !Ref EdgeProcessingLambdaCodeS3Bucket
        S3Key: !Ref EdgeProcessingLambdaCodeS3Key
      MemorySize: !FindInMap [EnvironmentConfig, !Ref Environment, EdgeProcessingLambdaMemorySize]
      Timeout: !FindInMap [EnvironmentConfig, !Ref Environment, EdgeProcessingLambdaTimeout]
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
      ReservedConcurrentExecutions: 10
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: edge-processing
    DependsOn: EdgeProcessingLogGroup

  # ========================================
  # CONSOLIDATED API GATEWAY
  # ========================================

  # Single API Gateway REST API
  ConsolidatedApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-consolidated-api-${Environment}'
      Description: 'Consolidated REST API for DynamoDB, Pinecone Search, and Edge Processing'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Service
          Value: consolidated-api

  # Cognito Authorizer (shared across all routes)
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub '${ProjectName}-cognito-authorizer-${Environment}'
      RestApiId: !Ref ConsolidatedApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Ref CognitoUserPoolArn
      IdentitySource: method.request.header.Authorization

  # ========================================
  # ROUTE 1: PROFILES (DynamoDB API)
  # ========================================

  ProfilesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ParentId: !GetAtt ConsolidatedApi.RootResourceId
      PathPart: profiles

  ProfilesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref ProfilesResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfilesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref ProfilesResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfilesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref ProfilesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ProfileIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ParentId: !Ref ProfilesResource
      PathPart: '{profileId}'

  ProfileIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfileIdPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfileIdDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBApiLambda.Arn}/invocations'

  ProfileIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref ProfileIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # ========================================
  # ROUTE 2: SEARCH (Pinecone Search)
  # ========================================

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ParentId: !GetAtt ConsolidatedApi.RootResourceId
      PathPart: search

  SearchPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref SearchResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PineconeSearchLambda.Arn}/invocations'

  SearchOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref SearchResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # ========================================
  # ROUTE 3: EDGES (Edge Processing)
  # ========================================

  EdgesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ParentId: !GetAtt ConsolidatedApi.RootResourceId
      PathPart: edges

  EdgesProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ParentId: !Ref EdgesResource
      PathPart: '{proxy+}'

  EdgesProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref EdgesProxyResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EdgeProcessingLambda.Arn}/invocations'

  EdgesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ConsolidatedApi
      ResourceId: !Ref EdgesProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # ========================================
  # LAMBDA PERMISSIONS
  # ========================================

  DynamoDBApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DynamoDBApiLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsolidatedApi}/*/*/*'

  PineconeSearchLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PineconeSearchLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsolidatedApi}/*/*/*'

  EdgeProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EdgeProcessingLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ConsolidatedApi}/*/*/*'

  # ========================================
  # API DEPLOYMENT
  # ========================================

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ConsolidatedApi
      StageName: !Ref Environment
    DependsOn:
      # Profiles routes
      - ProfilesGetMethod
      - ProfilesPostMethod
      - ProfilesOptionsMethod
      - ProfileIdGetMethod
      - ProfileIdPutMethod
      - ProfileIdDeleteMethod
      - ProfileIdOptionsMethod
      # Search routes
      - SearchPostMethod
      - SearchOptionsMethod
      # Edges routes
      - EdgesProxyMethod
      - EdgesOptionsMethod

  # Usage Plan
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub '${ProjectName}-consolidated-api-${Environment}-usage-plan'
      Description: 'Usage plan for consolidated API'
      ApiStages:
        - ApiId: !Ref ConsolidatedApi
          Stage: !Ref Environment
      Throttle:
        BurstLimit: !FindInMap [EnvironmentConfig, !Ref Environment, ApiThrottleBurstLimit]
        RateLimit: !FindInMap [EnvironmentConfig, !Ref Environment, ApiThrottleRateLimit]
    DependsOn: ApiDeployment

  # ========================================
  # CLOUDWATCH ALARMS
  # ========================================

  # DynamoDB API Lambda Alarms
  DynamoDBApiLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-dynamodb-api-${Environment}-lambda-errors'
      AlarmDescription: 'DynamoDB API Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DynamoDBApiLambda
      TreatMissingData: notBreaching

  # Pinecone Search Lambda Alarms
  PineconeSearchLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-pinecone-search-${Environment}-lambda-errors'
      AlarmDescription: 'Pinecone Search Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PineconeSearchLambda
      TreatMissingData: notBreaching

  # Edge Processing Lambda Alarms
  EdgeProcessingLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-edge-processing-${Environment}-lambda-errors'
      AlarmDescription: 'Edge Processing Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref EdgeProcessingLambda
      TreatMissingData: notBreaching

  # API Gateway Alarms
  ApiGateway4xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-consolidated-api-${Environment}-4xx-errors'
      AlarmDescription: 'API Gateway 4xx error rate alarm'
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub '${ProjectName}-consolidated-api-${Environment}'
      TreatMissingData: notBreaching

  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-consolidated-api-${Environment}-5xx-errors'
      AlarmDescription: 'API Gateway 5xx error rate alarm'
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub '${ProjectName}-consolidated-api-${Environment}'
      TreatMissingData: notBreaching

Outputs:
  # API Gateway Outputs
  ApiGatewayUrl:
    Description: 'Consolidated API Gateway endpoint URL'
    Value: !Sub 'https://${ConsolidatedApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  ApiGatewayId:
    Description: 'Consolidated API Gateway ID'
    Value: !Ref ConsolidatedApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  # Route-specific endpoints
  ProfilesEndpoint:
    Description: 'Profiles API endpoint'
    Value: !Sub 'https://${ConsolidatedApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/profiles'
    Export:
      Name: !Sub '${AWS::StackName}-ProfilesEndpoint'

  SearchEndpoint:
    Description: 'Search API endpoint'
    Value: !Sub 'https://${ConsolidatedApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/search'
    Export:
      Name: !Sub '${AWS::StackName}-SearchEndpoint'

  EdgesEndpoint:
    Description: 'Edges API endpoint'
    Value: !Sub 'https://${ConsolidatedApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/edges'
    Export:
      Name: !Sub '${AWS::StackName}-EdgesEndpoint'

  # Lambda Function Outputs
  DynamoDBApiLambdaArn:
    Description: 'DynamoDB API Lambda function ARN'
    Value: !GetAtt DynamoDBApiLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBApiLambdaArn'

  PineconeSearchLambdaArn:
    Description: 'Pinecone Search Lambda function ARN'
    Value: !GetAtt PineconeSearchLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PineconeSearchLambdaArn'

  EdgeProcessingLambdaArn:
    Description: 'Edge Processing Lambda function ARN'
    Value: !GetAtt EdgeProcessingLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EdgeProcessingLambdaArn'

  # Authorizer Output
  CognitoAuthorizerId:
    Description: 'Cognito Authorizer ID'
    Value: !Ref CognitoAuthorizer
    Export:
      Name: !Sub '${AWS::StackName}-AuthorizerId'