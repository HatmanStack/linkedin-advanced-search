AWSTemplateFormatVersion: '2010-09-09'
Description: 'RAG-CloudStack: API Gateway v2 (HTTP) with POST routes to Python and Node Lambdas, Cognito JWT auth, and CORS'

Parameters:
  ProjectName:
    Type: String
    Default: rag-cloudstack
  ApiName:
    Type: String
    Default: rag-api
  StageName:
    Type: String
    Default: prod
  PythonLambdaArn:
    Type: String
  NodeLambdaArn:
    Type: String
  PythonRoutePath:
    Type: String
    Default: /process
  NodeRoutePath:
    Type: String
    Default: /pinecone-search
  UserPoolId:
    Type: String
  UserPoolClientId:
    Type: String

Resources:
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref ApiName
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['POST','OPTIONS']
        AllowHeaders: ['Authorization','Content-Type']

  Authorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      Name: !Sub '${ProjectName}-jwt-authorizer'
      JwtConfiguration:
        Audience: [!Ref UserPoolClientId]
        Issuer: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}'

  PythonIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonLambdaArn}/invocations'
      PayloadFormatVersion: '2.0'

  NodeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NodeLambdaArn}/invocations'
      PayloadFormatVersion: '2.0'

  PythonRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: !Sub 'POST ${PythonRoutePath}'
      Target: !Sub 'integrations/${PythonIntegration}'
      AuthorizationType: JWT
      AuthorizerId: !Ref Authorizer

  NodeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: !Sub 'POST ${NodeRoutePath}'
      Target: !Sub 'integrations/${NodeIntegration}'
      AuthorizationType: JWT
      AuthorizerId: !Ref Authorizer

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref StageName
      AutoDeploy: true

  LambdaPermissionPython:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PythonLambdaArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/POST/*'

  LambdaPermissionNode:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NodeLambdaArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/POST/*'

Outputs:
  HttpApiId:
    Value: !Ref HttpApi
  BaseUrl:
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'


