AWSTemplateFormatVersion: '2010-09-09'
Description: 'RAG-CloudStack: Lambda functions (Python and Node) with IAM and S3 artifact refs'

Parameters:
  ProjectName:
    Type: String
    Default: rag-cloudstack
  ArtifactsBucketName:
    Type: String
    Description: S3 bucket where lambda artifacts are uploaded
  PythonLambdaKey:
    Type: String
    Default: lambdas/python-handler.zip
    Description: S3 object key for Python lambda zip under lambdas/ prefix
  NodeLambdaKey:
    Type: String
    Default: lambdas/node-handler.zip
    Description: S3 object key for Node lambda zip under lambdas/ prefix
  DynamoTableName:
    Type: String
    Description: DynamoDB table name the lambdas can access
  PineconeApiKey:
    Type: String
    Default: ''
    NoEcho: true
    Description: Optional Pinecone API key for Node Lambda
  PineconeHost:
    Type: String
    Default: ''
    Description: Optional Pinecone host URL for Node Lambda
  PineconeIndexName:
    Type: String
    Default: ''
    Description: Optional Pinecone index name for Node Lambda

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoTableName}'

  PythonFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-python-handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Handler: lambda_function.handler
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Ref PythonLambdaKey
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoTableName
          DYNAMODB_TABLE_NAME: !Ref DynamoTableName

  NodeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-node-handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Ref NodeLambdaKey
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoTableName
          DYNAMODB_TABLE_NAME: !Ref DynamoTableName
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_HOST: !Ref PineconeHost
          PINECONE_INDEX_NAME: !Ref PineconeIndexName

Outputs:
  PythonLambdaArn:
    Value: !GetAtt PythonFunction.Arn
  NodeLambdaArn:
    Value: !GetAtt NodeFunction.Arn


