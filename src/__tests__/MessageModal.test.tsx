/**
 * Unit tests for MessageModal pre-populated content functionality
 * 
 * Tests the pre-population logic, AI-generated content indicators,
 * and generation workflow controls in the MessageModal component.
 */

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { MessageModal } from '@/components/MessageModal';
import type { Connection } from '@/types';

// Mock the toast hook
vi.mock('@/hooks/use-toast', () => ({
  useToast: () => ({
    toast: vi.fn()
  })
}));

// Mock the utils
vi.mock('@/lib/utils', () => ({
  cn: (...classes: string[]) => classes.filter(Boolean).join(' ')
}));

// Mock error handling utils
vi.mock('@/utils/errorHandling', () => ({
  transformErrorForUser: vi.fn(() => ({
    userMessage: 'Test error message',
    severity: 'error'
  })),
  getToastVariant: vi.fn(() => 'destructive'),
  ERROR_MESSAGES: {
    SEND_MESSAGE: 'Failed to send message'
  }
}));

// Mock empty state component
vi.mock('@/components/ui/empty-state', () => ({
  NoMessagesState: ({ connectionName }: { connectionName: string }) => (
    <div data-testid="no-messages-state">No messages with {connectionName}</div>
  )
}));

// Mock loading overlay component
vi.mock('@/components/ui/loading-overlay', () => ({
  default: ({ children, isLoading }: { children: React.ReactNode; isLoading: boolean }) => (
    <div data-testid="loading-overlay">
      {isLoading ? 'Loading...' : children}
    </div>
  )
}));

describe('MessageModal Pre-populated Content', () => {
  const mockConnection: Connection = {
    id: 'test-connection-1',
    first_name: 'John',
    last_name: 'Doe',
    position: 'Software Engineer',
    company: 'Tech Corp',
    status: 'allies',
    date_added: '2024-01-01',
    message_history: []
  };

  const defaultProps = {
    isOpen: true,
    connection: mockConnection,
    onClose: vi.fn(),
    onSendMessage: vi.fn()
  };

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('Pre-populated Message Content', () => {
    it('should populate message input with prePopulatedMessage', () => {
      const prePopulatedMessage = 'Hello John, I wanted to discuss AI trends...';
      
      render(
        <MessageModal
          {...defaultProps}
          prePopulatedMessage={prePopulatedMessage}
        />
      );

      const messageInput = screen.getByPlaceholderText('Type your message...');
      expect(messageInput).toHaveValue(prePopulatedMessage);
    });

    it('should clear message input when prePopulatedMessage is not provided', () => {
      const { rerender } = render(
        <MessageModal
          {...defaultProps}
          prePopulatedMessage="Initial message"
        />
      );

      let messageInput = screen.getByPlaceholderText('Type your message...');
      expect(messageInput).toHaveValue('Initial message');

      rerender(
        <MessageModal
          {...defaultProps}
          prePopulatedMessage={undefined}
        />
      );

      messageInput = screen.getByPlaceholderText('Type your message...');
      expect(messageInput).toHaveValue('');
    });

    it('should update placeholder text for generated content', () => {
      render(
        <MessageModal
          {...defaultProps}
          prePopulatedMessage="Generated message"
          isGeneratedContent={true}
        />
      );

      expect(screen.getByPlaceholderText('Edit the AI-generated message...')).toBeInTheDocument();
    });
  });

  describe('AI-Generated Content Indicators', () => {
    it('should show AI Generated badge in title when isGeneratedContent is true', () => {
      render(
        <MessageModal
          {...defaultProps}
          isGeneratedContent={true}
        />
      );

      expect(screen.getByText('AI Generated')).toBeInTheDocument();
    });

    it('should show AI-generated content description', () => {
      render(
        <MessageModal
          {...defaultProps}
          isGeneratedContent={true}
        />
      );

      expect(screen.getByText(/This message was generated by AI based on your conversation topic/)).toBeInTheDocument();
    });

    it('should show AI-generated message info box', () => {
      render(
        <MessageModal
          {...defaultProps}
          isGeneratedContent={true}
        />
      );

      expect(screen.getByText('AI-Generated Message')).toBeInTheDocument();
      expect(screen.getByText(/This message was created based on your conversation topic/)).toBeInTheDocument();
    });

    it('should apply special styling to input for generated content', () => {
      render(
        <MessageModal
          {...defaultProps}
          isGeneratedContent={true}
        />
      );

      const messageInput = screen.getByPlaceholderText('Edit the AI-generated message...');
      expect(messageInput).toHaveClass('border-blue-300', 'dark:border-blue-700');
    });
  });

  describe('Generation Workflow Controls', () => {
    it('should show Approve & Next and Skip buttons when showGenerationControls is true', () => {
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
        />
      );

      expect(screen.getByText('Approve & Next')).toBeInTheDocument();
      expect(screen.getByText('Skip')).toBeInTheDocument();
      expect(screen.queryByRole('button', { name: /send/i })).not.toBeInTheDocument();
    });

    it('should call onApproveAndNext when Approve & Next button is clicked', () => {
      const onApproveAndNext = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
          onApproveAndNext={onApproveAndNext}
        />
      );

      fireEvent.click(screen.getByText('Approve & Next'));
      expect(onApproveAndNext).toHaveBeenCalledTimes(1);
    });

    it('should call onSkipConnection when Skip button is clicked', () => {
      const onSkipConnection = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
          onSkipConnection={onSkipConnection}
        />
      );

      fireEvent.click(screen.getByText('Skip'));
      expect(onSkipConnection).toHaveBeenCalledTimes(1);
    });

    it('should show generation workflow help text', () => {
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
        />
      );

      expect(screen.getByText('Enter to approve, Ctrl+S to skip, Esc to skip')).toBeInTheDocument();
    });
  });

  describe('Keyboard Shortcuts', () => {
    it('should call onApproveAndNext when Enter is pressed in generation mode', () => {
      const onApproveAndNext = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
          onApproveAndNext={onApproveAndNext}
        />
      );

      const messageInput = screen.getByPlaceholderText('Type your message...');
      fireEvent.keyDown(messageInput, { key: 'Enter', shiftKey: false });
      
      expect(onApproveAndNext).toHaveBeenCalledTimes(1);
    });

    it('should call onSkipConnection when Escape is pressed in generation mode', async () => {
      const onSkipConnection = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
          onSkipConnection={onSkipConnection}
        />
      );

      fireEvent.keyDown(document, { key: 'Escape' });
      
      await waitFor(() => {
        expect(onSkipConnection).toHaveBeenCalledTimes(1);
      });
    });

    it('should call onSkipConnection when Ctrl+S is pressed in generation mode', async () => {
      const onSkipConnection = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
          onSkipConnection={onSkipConnection}
        />
      );

      fireEvent.keyDown(document, { key: 's', ctrlKey: true });
      
      await waitFor(() => {
        expect(onSkipConnection).toHaveBeenCalledTimes(1);
      });
    });

    it('should call onClose when Escape is pressed in normal mode', async () => {
      const onClose = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          onClose={onClose}
          showGenerationControls={false}
        />
      );

      fireEvent.keyDown(document, { key: 'Escape' });
      
      await waitFor(() => {
        expect(onClose).toHaveBeenCalledTimes(1);
      });
    });

    it('should call onSkipConnection when dialog is closed via X button in generation mode', () => {
      const onSkipConnection = vi.fn();
      const onClose = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={true}
          onSkipConnection={onSkipConnection}
          onClose={onClose}
        />
      );

      // Simulate dialog close via X button
      const dialog = screen.getByRole('dialog');
      fireEvent.keyDown(dialog, { key: 'Escape' }); // This simulates the dialog's built-in close behavior
      
      expect(onSkipConnection).toHaveBeenCalledTimes(1);
      expect(onClose).not.toHaveBeenCalled();
    });

    it('should call onClose when dialog is closed via X button in normal mode', () => {
      const onSkipConnection = vi.fn();
      const onClose = vi.fn();
      
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={false}
          onSkipConnection={onSkipConnection}
          onClose={onClose}
        />
      );

      // Simulate dialog close via X button
      const dialog = screen.getByRole('dialog');
      fireEvent.keyDown(dialog, { key: 'Escape' }); // This simulates the dialog's built-in close behavior
      
      expect(onClose).toHaveBeenCalledTimes(1);
      expect(onSkipConnection).not.toHaveBeenCalled();
    });
  });

  describe('Integration with Normal Message Flow', () => {
    it('should still allow normal message sending when not in generation mode', async () => {
      const onSendMessage = vi.fn().mockResolvedValue(undefined);
      
      render(
        <MessageModal
          {...defaultProps}
          onSendMessage={onSendMessage}
          showGenerationControls={false}
        />
      );

      const messageInput = screen.getByPlaceholderText('Type your message...');
      const sendButton = screen.getByRole('button', { name: /send/i });

      fireEvent.change(messageInput, { target: { value: 'Test message' } });
      fireEvent.click(sendButton);

      await waitFor(() => {
        expect(onSendMessage).toHaveBeenCalledWith('Test message');
      });
    });

    it('should not show generation controls in normal mode', () => {
      render(
        <MessageModal
          {...defaultProps}
          showGenerationControls={false}
        />
      );

      expect(screen.queryByText('Approve & Next')).not.toBeInTheDocument();
      expect(screen.queryByText('Skip')).not.toBeInTheDocument();
      expect(screen.getByRole('button', { name: /send/i })).toBeInTheDocument();
    });
  });
});
